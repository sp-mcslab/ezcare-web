generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CallRecord {
  id           String    @db.VarChar(100)
  userid       String    @db.VarChar(100)
  roomid       String    @db.VarChar(100)
  joinat       DateTime  @db.Timestamptz(6)
  exitat       DateTime? @db.Timestamptz(6)
  tenantcode   String    @db.VarChar(100)
  hospitalcode String    @db.VarChar(100)
  Hospital     Hospital  @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_CallRecord_1")
  Room         Room      @relation(fields: [roomid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Room_TO_CallRecord_1")
  User         User      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_CallRecord_1")

  @@id([id, userid, roomid], map: "PK_CALLRECORD")
}

model Hospital {
  code            String            @db.VarChar(100)
  tenantcode      String            @db.VarChar(100)
  CallRecord      CallRecord[]
  Tenant          Tenant            @relation(fields: [tenantcode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "FK_Tenant_TO_Hospital_1")
  Host            Host[]
  Invite          Invite[]
  OperationRecord OperationRecord[]
  Room            Room[]
  User            User[]

  @@id([code, tenantcode], map: "PK_HOSPITAL")
}

model Host {
  roomid       String   @db.VarChar(100)
  userid       String   @db.VarChar(100)
  hospitalcode String   @db.VarChar(100)
  tenantcode   String   @db.VarChar(100)
  Hospital     Hospital @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_Host_1")
  Room         Room     @relation(fields: [roomid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Room_TO_Host_1")
  User         User     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Host_1")

  @@id([roomid, userid], map: "PK_HOST")
}

model Invite {
  userid       String   @db.VarChar(100)
  roomid       String   @db.VarChar(100)
  tenantcode   String
  hospitalcode String
  Hospital     Hospital  @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_Invite_1")
  Room         Room     @relation(fields: [roomid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Room_TO_Invite_1")
  User         User     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Invite_1")

   @@id([userid, roomid], map: "PK_INVITE")
}

model OperationRecord {
  id           String      @db.VarChar(100)
  userid       String      @db.VarChar(100)
  roomid       String      @db.VarChar(100)
  transaction  Transaction
  time         DateTime    @db.Timestamptz(6)
  hospitalcode String      @db.VarChar(100)
  tenantcode   String      @db.VarChar(100)
  Hospital     Hospital    @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_OperationRecord_1")
  Room         Room        @relation(fields: [roomid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Room_TO_OperationRecord_1")
  User         User        @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_OperationRecord_1")

  @@id([id, userid, roomid], map: "PK_OPERATIONRECORD")
}

model Room {
  id              String            @id(map: "PK_ROOM") @db.VarChar(100)
  creatorid       String            @db.VarChar(100)
  name            String            @db.VarChar(100)
  createdat       DateTime          @db.Timestamptz(6)
  openat          DateTime          @db.Timestamptz(6)
  deletedat       DateTime?         @db.Timestamptz(6)
  hospitalcode    String            @db.VarChar(100)
  tenantcode      String            @db.VarChar(100)
  flag            RoomFlag          @default(CLOSED)
  CallRecord      CallRecord[]
  Host            Host[]
  Invite          Invite[]
  OperationRecord OperationRecord[]
  Hospital        Hospital          @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_Room_1")
  User            User              @relation(fields: [creatorid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Room_1")
}

model Tenant {
  code     String     @id(map: "PK_TENANT") @db.VarChar(100)
  Hospital Hospital[]
}

model User {
  id              String            @id(map: "PK_USER") @db.VarChar(100)
  username        String            @db.VarChar(100)
  password        String            @db.VarChar(100)
  name            String            @db.VarChar(100)
  displayname     String            @db.VarChar(100)
  hospitalcode    String            @db.VarChar(100)
  tenantcode      String            @db.VarChar(100)
  role            UserRole
  CallRecord      CallRecord[]
  Host            Host[]
  Invite          Invite[]
  OperationRecord OperationRecord[]
  Room            Room[]
  Hospital        Hospital          @relation(fields: [hospitalcode, tenantcode], references: [code, tenantcode], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hospital_TO_User_1")
}

enum RoomFlag {
  CLOSED
  OPENED
  SCHEDULED
}

enum Transaction {
  M0
  M1
  V0
  V1
}

enum UserRole {
  N
  D
  P
  S
}
